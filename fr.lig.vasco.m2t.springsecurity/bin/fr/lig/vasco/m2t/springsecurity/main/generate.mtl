[comment encoding = UTF-8 /]
[module generate('http://www.example.org/ActionRoles')]


[template public generateElement(aPolicy : Policy)]
[comment @main/]

[semanticInterpretation(aPolicy)/]

[file ('spring.xml' , false, 'UTF-8')]
[comment Genrating the roles assignment for each action (URL)/]
<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security.xsd">

<!--*************************************************************************************************
! SpringSecurity configuration file automatically generated by VASCO Team at [getCurrentTime()/]
!****************************************************************************************************-->

<!--
! Make sure that the references : Roleoperations, Secureuml and webapplication in the ActionRoles' Model are already setted
! The referenced models should be loaded by the "load resource" menu item : right-click on the model >> load resource >> browse workspace 
-->

<!-- Definition of URL interception -->

	<http disable-url-rewriting="false" auto-config="true"
		use-expressions="true" access-decision-manager-ref="accessDecisionManager">
		<headers disabled="true" />
		<csrf disabled="true" />

        <intercept-url pattern="/login" 
                 access="permitAll" /> 
        <intercept-url pattern="/*" 
                 access="hasAnyRole('ROLE_USER')" />
[for (anAction : Action | aPolicy.action) ]		
        <intercept-url pattern="[anAction.label/]" 
                 access="hasAnyRole([for (aRole: Role | anAction.role)][if not(i=anAction.role->size())]'ROLE_[aRole.name.toUpper()/]', [/if][if (i=anAction.role->size())]'ROLE_[aRole.name.toUpper()/]'[/if][/for])" />
[/for]

		<form-login login-page="/login" username-parameter="ssoId"
			password-parameter="password" authentication-failure-url="/Access_Denied" />
		<logout invalidate-session="true" logout-url="/logout"
			delete-cookies="*" logout-success-url="/" />
	</http>	

[for (anAction : Action | aPolicy.action) ]	
  [if (anAction.role.constraint->size()>0)]
   [generateOCLFilter(anAction, i)/]
  [/if]
[/for]

[for (aPackage: uml::Package | aPolicy.secureuml.oclAsType(uml::Model).eAllContents(uml::Package))]
	[if (aPackage.name.equalsIgnoreCase('roles'))]   
[comment Genrating the definition of the users and the user assignments/]

<!-- Definition of USERS and USER ASSIGNMENTS -->

	<authentication-manager>
		<authentication-provider>
			<user-service>
[for (aClass: uml::Class | aPackage.eContents(uml::Class)) ]
[if (aClass.hasStereotype('User'))]				
<user name="[aClass.name/]" password="password" 
      authorities="[for (anAssociation : uml::Association | aClass.getAssociations())]
[if (anAssociation.hasStereotype('UA'))]
[for (aRole: uml::Class | anAssociation.getEndTypes())]
[if (aRole.hasStereotype('Role'))]ROLE_[aRole.name.toUpper()/]"[/if][/for]
[/if]
[/for] />
[/if]				
[/for]
			</user-service>
		</authentication-provider>
	</authentication-manager>

[comment Generation the definition of the roles and their hierarchy/]

<!-- Definition of ROLES and ROLES HIERARCHY -->

	<b:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<b:constructor-arg name="decisionVoters">
			<b:list>
				<b:ref bean="webExpressionVoter" />
				<b:ref bean="roleHierarchyVoter" />
				<b:ref bean="authenticatedVoter" />
			</b:list>
		</b:constructor-arg>
	</b:bean>

	<b:bean id="authenticatedVoter"
		class="org.springframework.security.access.vote.AuthenticatedVoter" />

	<b:bean id="roleHierarchyVoter"
		class="org.springframework.security.access.vote.RoleHierarchyVoter">
		<b:constructor-arg ref="roleHierarchy" />
	</b:bean>

	<!-- <global-method-security pre-post-annotations="enabled"> <expression-handler 
		ref="expressionHandler" /> </global-method-security> -->

	<b:bean id="webExpressionVoter"
		class="org.springframework.security.web.access.expression.WebExpressionVoter">
		<b:property name="expressionHandler">
			<b:bean
				class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
				<b:property name="roleHierarchy" ref="roleHierarchy" />
			</b:bean>
		</b:property>
	</b:bean>

	<b:bean id="defaultMethodSecurityExpressionHandler"
		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<b:property name="roleHierarchy" ref="roleHierarchy" />
	</b:bean>

	<b:bean id="roleHierarchy"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<b:property name="hierarchy">
			<b:value>              
[for (aClass: uml::Class | aPackage.eContents(uml::Class)) ]
[if (aClass.hasStereotype('Role'))]
ROLE_[aClass.name.toUpper()/] 
  [for (aParent : uml::Class | aClass.getSuperClasses())]
    [if (aParent.hasStereotype('Role'))]
     > ROLE_[aParent.name.toUpper()/]
    [/if]
  [/for]
  [/if]
[/for]
            </b:value>
		</b:property>
	</b:bean>
	[/if]
  [/for]
</b:beans>
[/file]
[generateMySQL(aPolicy.secureuml)/]
[generateXMLConfigForDB(aPolicy)/]
[/template]

[comment @Queries/]
[query public getCurrentTime(traceabilityContext : OclAny): 
    String = invoke('fr.lig.vasco.m2t.springsecurity.main.GenerationSupport', 'getCurrentTime()', Sequence{})
/]

[query public hasStereotype( e : uml::Element, value: String) : Boolean =
not e.getAppliedStereotypes()->select(e : uml::Stereotype  | e.name = value)->isEmpty()
/]

[template public generateOCLFilter(anAction : Action, nb : Integer)]
[file ('CustomOCLFiler_'+nb+'.java' , false, 'UTF-8')]

package fr.lig.vasco.filters;

import java.io.IOException;
import java.util.Enumeration;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;

import org.springframework.security.core.context.SecurityContextHolder;

/**
 * Servlet Filter implementation class CustomOCLFilter_[nb/]
 * Automatically generated by LIG VASCO Team at [getCurrentTime()/]
 */
@WebFilter("[anAction.label/]")
public class CustomOCLFilter_[nb/] implements Filter {

    /**
     * Default constructor. 
     */
    public CustomOCLFilter_[nb/]() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		
		// pass the request along the Spring Security filter chain
				chain.doFilter(request, response);
		
		// Translation of the OCL Constraint to JAVA
		/*
         The constraints goes as follows:
[for (aConstraint : Constraint | anAction.role.constraint) ]	
         Constraint n.[i/] : [aConstraint._body/]
[/for]
        */
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		// TODO Auto-generated method stub
	}
}
[/file]
[/template]

[template public semanticInterpretation(aPolicy : Policy)]
[file ('semantic.txt' , false, 'UTF-8')]
<!--*****************************************************************************
! File automatically generated by VASCO Team at [getCurrentTime()/]
!********************************************************************************-->
[for (anAction : Action | aPolicy.action) ][if (anAction.role->isEmpty())]
| [getCurrentTime()/] | ACTION	WARNING	Action [anAction.label/] not accessed by any role --> Please check your web application model
[/if][if (anAction.role.constraint->size()>0)]
| [getCurrentTime()/] | ACTION	INFO	[anAction.role.constraint->size()/] constraint must be defined in the Action's [anAction.label/] web filter --> Please check your custom OCL Filters
[/if][/for]



[/file]
[/template]

[template public generateMySQL(aModel : uml::Model)]
[file ('/mysql/mysql.sql' , false, 'UTF-8')]

-- Dumping database structure for the web apllication
CREATE DATABASE IF NOT EXISTS `[aModel.name/]` 
USE `[aModel.name/]`;

-- Dumping structure for table users
CREATE TABLE IF NOT EXISTS `users` (
  `username` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping structure for table authorities
CREATE TABLE IF NOT EXISTS `authorities` (
  `username` varchar(50) NOT NULL,
  `authority` varchar(50) NOT NULL,
  UNIQUE KEY `ix_auth_username` (`username`,`authority`),
  CONSTRAINT `fk_authorities_users` FOREIGN KEY (`username`) REFERENCES `users` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

[for (aPackage: uml::Package | aModel.oclAsType(uml::Model).eAllContents(uml::Package))]
	[if (aPackage.name.equalsIgnoreCase('roles'))] 

-- Dumping data for table users: 
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES
[for (aClass: uml::Class | aPackage.eContents(uml::Class)) ]
[if (aClass.hasStereotype('User'))]	
	('[aClass.name/]', '5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8', 1),
[/if][/for]
;
[/if]
[/for]

[for (aPackage: uml::Package | aModel.oclAsType(uml::Model).eAllContents(uml::Package))]

-- Dumping data for table authorities:
INSERT INTO `authorities` (`username`, `authority`) VALUES
[for (aClass: uml::Class | aPackage.eContents(uml::Class)) ]
[if (aClass.hasStereotype('User'))]		
[for (anAssociation : uml::Association | aClass.getAssociations())]
[if (anAssociation.hasStereotype('UA'))]
[for (aRole: uml::Class | anAssociation.getEndTypes())]
[if (aRole.hasStereotype('Role'))]
	('[aClass.name/]', 'ROLE_[aRole.name.toUpper()/]'),
[/if][/for][/if][/for][/if][/for]
;
[/for]
[/file]
[generateJDBCProperties(aModel)/]
[/template]

[template public generateJDBCProperties(aModel : uml::Model)]
[file ('/mysql/jdbc.properties' , false, 'UTF-8')]
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/[aModel.name/]
jdbc.username=root
jdbc.password= 
[/file]
[/template]

[template public generateXMLConfigForDB(aPolicy : Policy)]
[file ('/mysql/spring_db.xml' , false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<b:beans 
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="http://www.springframework.org/schema/security"
    xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.2.xsd">

<!--*************************************************************************************************
! SpringSecurity configuration file automatically generated by VASCO Team at [getCurrentTime()/]
!****************************************************************************************************-->

<!--
! This spring security configuration file includes a reference to the database containing the USERS, ROLES and ROLE ASSIGNMENTS 
! Make sure that the references : Roleoperations, Secureuml and webapplication in the ActionRoles' Model are already setted
! The referenced models should be loaded by the "load resource" menu item : right-click on the model >> load resource >> browse workspace 
-->


   <!-- Definition of URL interception -->

	<http disable-url-rewriting="false" auto-config="true"
		use-expressions="true" access-decision-manager-ref="accessDecisionManager">
		<headers disabled="true" />
		<csrf disabled="true" />

        <intercept-url pattern="/login" 
                 access="permitAll" /> 
        <intercept-url pattern="/*" 
                 access="hasAnyRole('ROLE_USER')" />
[for (anAction : Action | aPolicy.action) ]		
        <intercept-url pattern="[anAction.label/]" 
                 access="hasAnyRole([for (aRole: Role | anAction.role)][if not(i=anAction.role->size())]'ROLE_[aRole.name.toUpper()/]', [/if][if (i=anAction.role->size())]'ROLE_[aRole.name.toUpper()/]'[/if][/for])" />
[/for]

		<form-login login-page="/login" username-parameter="ssoId"
			password-parameter="password" authentication-failure-url="/Access_Denied" />
		<logout invalidate-session="true" logout-url="/logout"
			delete-cookies="*" logout-success-url="/" />
	</http>	

    <context:property-placeholder location="classpath:foo.properties" />

    <b:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<b:property name="driverClassName" value="${jdbc.driverClassName}" />
		<b:property name="url" value="${jdbc.url}" />
		<b:property name="username" value="${jdbc.username}" />
		<b:property name="password" value="${jdbc.password}" />
	</b:bean>

    <!-- Select users and user_roles from database -->
	<authentication-manager>
	  <authentication-provider>
		<jdbc-user-service data-source-ref="dataSource"
		  users-by-username-query=
		    "select username,password, enabled from users where username=?"
		  authorities-by-username-query=
		    "select username, authority from authorities where username =?  " />
	  </authentication-provider>
	</authentication-manager>

[comment Generation the roles and their hierarchy/]

<!-- Definition of ROLES and ROLES HIERARCHY -->

	<b:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<b:constructor-arg name="decisionVoters">
			<b:list>
				<b:ref bean="webExpressionVoter" />
				<b:ref bean="roleHierarchyVoter" />
				<b:ref bean="authenticatedVoter" />
			</b:list>
		</b:constructor-arg>
	</b:bean>

	<b:bean id="authenticatedVoter"
		class="org.springframework.security.access.vote.AuthenticatedVoter" />

	<b:bean id="roleHierarchyVoter"
		class="org.springframework.security.access.vote.RoleHierarchyVoter">
		<b:constructor-arg ref="roleHierarchy" />
	</b:bean>

	<b:bean id="webExpressionVoter"
		class="org.springframework.security.web.access.expression.WebExpressionVoter">
		<b:property name="expressionHandler">
			<b:bean
				class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
				<b:property name="roleHierarchy" ref="roleHierarchy" />
			</b:bean>
		</b:property>
	</b:bean>

	<b:bean id="defaultMethodSecurityExpressionHandler"
		class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
		<b:property name="roleHierarchy" ref="roleHierarchy" />
	</b:bean>
[for (aPackage: uml::Package | aPolicy.secureuml.oclAsType(uml::Model).eAllContents(uml::Package))]
	[if (aPackage.name.equalsIgnoreCase('roles'))]   
	<b:bean id="roleHierarchy"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<b:property name="hierarchy">
			<b:value>              
[for (aClass: uml::Class | aPackage.eContents(uml::Class)) ]
[if (aClass.hasStereotype('Role'))]
ROLE_[aClass.name.toUpper()/] 
  [for (aParent : uml::Class | aClass.getSuperClasses())]
    [if (aParent.hasStereotype('Role'))]
     > ROLE_[aParent.name.toUpper()/]
    [/if]
  [/for]
  [/if]
[/for]
            </b:value>
		</b:property>
	</b:bean>
	[/if]
  [/for]
</b:beans>
[/file]
[/template]

